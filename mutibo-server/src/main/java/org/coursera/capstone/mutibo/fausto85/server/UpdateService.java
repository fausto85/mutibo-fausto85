package org.coursera.capstone.mutibo.fausto85.server;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Collection;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.coursera.capstone.mutibo.fausto85.client.MutiboInterface;
import org.coursera.capstone.mutibo.fausto85.server.repo.GCMUserRegistration;
import org.coursera.capstone.mutibo.fausto85.server.repo.Trivia;
import org.coursera.capstone.mutibo.fausto85.server.repo.TriviaRepository;
import org.coursera.capstone.mutibo.fausto85.server.repo.TriviaUpdate;
import org.coursera.capstone.mutibo.fausto85.server.repo.TriviaUpdate.Rating;
import org.coursera.capstone.mutibo.fausto85.server.repo.User;
import org.coursera.capstone.mutibo.fausto85.server.repo.UserRepository;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller
public class UpdateService {

	@Autowired
	private UserRepository mUserRepository;
	
	@Autowired
	private TriviaRepository mTriviaRepository;
	
	private static final long DISLIKES_TO_DELETE = (UserTestDatabase.MAX_USERS / 10) * (-1);
	
	@RequestMapping(value=MutiboInterface.USER_UPDATE_SVC_PATH, method=RequestMethod.POST)
	public @ResponseBody boolean updateUser(@RequestBody User userFromRequest){
		Collection<User> users = mUserRepository.findByUsername(userFromRequest.getUsername());
		if(users != null && users.iterator()!=null){
			User userFromRepo = users.iterator().next();
			long newPoints = userFromRepo.getPoints() + userFromRequest.getPoints();
			long newLevel = userFromRepo.getLevelPlayed() + 1;
			userFromRepo.setPoints(newPoints);
			userFromRepo.setLevelPlayed(newLevel);
			mUserRepository.save(userFromRepo);
			System.out.println("User with name: " + userFromRepo.getUsername() + " Points: " + userFromRepo.getPoints());
			return true;
		}
		return false;
	}

	@RequestMapping(value=MutiboInterface.TRIVIAS_FOR_USER_PATH, method=RequestMethod.POST)
	public @ResponseBody Collection<Trivia> getTriviasForUser(@RequestBody User userFromRequest){
		Collection<User> users = mUserRepository.findByUsername(userFromRequest.getUsername());
		if(users != null && users.iterator()!=null){
			User userFromRepo = users.iterator().next();
			Collection<Trivia> trivias = mTriviaRepository.findByLevel(userFromRepo.getLevelPlayed());
			
			System.out.println("User with name: " + userFromRepo.getUsername() + " asking for level " + userFromRepo.getLevelPlayed());
			return trivias;
		}
		return null;
	}
	
	
	@RequestMapping(value=MutiboInterface.TRIVIA_UPDATE_SVC_PATH, method=RequestMethod.POST)
	public @ResponseBody boolean updateTriviaRating(@RequestBody Collection<TriviaUpdate> triviaUpdates){
		if(triviaUpdates !=null){
			for(TriviaUpdate update : triviaUpdates){
				Trivia t = mTriviaRepository.findOne(update.getId());
				if(t !=null){
					if(update.getRating() == Rating.LIKE){
						//System.out.println("Trivia with Id: " + t.getId() + "LIKED");
						//long rating = t.getRates() + 1;
						//t.setRates(rating);
					}else if(update.getRating() == Rating.DISLIKE){
						System.out.println("Trivia with Id: " + t.getId() + " DISLIKED");
						long rating = t.getRates() - 1;
						t.setRates(rating);
					}else if(update.getRating() == Rating.SKIPPED){
						//Do nothing
					}
					if(needsToBeDeleted(t.getId()) == false){
						mTriviaRepository.save(t);
					}else{
						mTriviaRepository.delete(t.getId());
						System.out.println("Deleted trivia with Id: " + t.getId());
					}
				}
			}
			return true;
		}else{
			return false;
		}
		
	}
	
	private Boolean needsToBeDeleted(long id){
		Boolean delete = false;
		Trivia t = mTriviaRepository.findOne(id);
		if(t.getRates() < DISLIKES_TO_DELETE){
			delete = true;
		}
		return delete;
	}	

	@RequestMapping(value=MutiboInterface.TRIVIA_ADDING_SVC_PATH, method=RequestMethod.POST)
	public @ResponseBody boolean addNewTrivias(@RequestBody Collection<Trivia> newTrivias){
		Boolean success = false;
		
		//Had issues with autogenerated ids so I'm introducing them manually
		//Even though this is a slow opeartion is not as important because the client 
		//doing it is an admin
		long maxId = calculateMaxId();
		
		try{
			for(Trivia t : newTrivias){
				maxId++;
				t.setId(maxId); 
				mTriviaRepository.save(t);
			}
			sendGCMNotification();
			success = true;
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return success;
	}
	
	private void sendGCMNotification(){
        try{
        	Iterable<User> users = mUserRepository.findAll();
        	for(User u: users){
        		if(u.getGcmRegistrationId() != null){
        	        System.out.println( "Sending POST to GCM for user " + u.getUsername());
        	        sendPost(u.getGcmRegistrationId());
        		}
        	}
        }catch (Exception e){
        	e.printStackTrace();
        }
	}
	
	private long calculateMaxId(){
		Collection<Trivia> triviasInRepo = (Collection<Trivia>) mTriviaRepository.findAll();
		long maxId = 1;
		for(Trivia t : triviasInRepo){
			if (maxId < t.getId()){
				maxId = t.getId();
			}
		}
		return maxId;
	}

	@RequestMapping(value=MutiboInterface.GCM_REGISTRATION_PATH, method=RequestMethod.POST)
	public @ResponseBody boolean registerUserGCM(@RequestBody GCMUserRegistration userRegistration){
		Boolean success = false;

		Collection<User> users = mUserRepository.findByUsername(userRegistration.getUsername());
		try {
			User userFromRepo = users.iterator().next();
			userFromRepo.setGcmRegistrationId(userRegistration.getRegistrationId());
			mUserRepository.save(userFromRepo);
			System.out.println("User with name: " + userFromRepo.getUsername() + " regGCM: " + userFromRepo.getGcmRegistrationId());
			success = true;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return success;
	}
	
	private void sendPost(String regId) throws Exception {

	    final String API_KEY = "AIzaSyCf-KM8ukTkUvLVOTG55fiM413I2L-Mwow";


	    String url = "https://android.googleapis.com/gcm/send";
	    HttpClient client = new DefaultHttpClient();
	    HttpPost post = new HttpPost(url);
	    JSONObject mainData = new JSONObject();
	    try {
	        JSONObject data = new JSONObject();
	        data.put("message1", "New Mutibo Sets!");
	        JSONArray regIds = new JSONArray();
	        regIds.add(regId);
	        mainData.put("registration_ids", regIds);
	        mainData.put("data", data);
	    } catch (Exception e) {
	        // TODO Auto-generated catch block
	        e.printStackTrace();
	    }

	    StringEntity se = new StringEntity(mainData.toString());
	    post.setEntity(se);
	    post.addHeader("Authorization", "key="+API_KEY);
	    post.addHeader("Content-Type", "application/json");
	    HttpResponse response = client.execute(post);
	    System.out.println(
	            "response code ="+Integer.toString(response.getStatusLine().getStatusCode()));
	    BufferedReader rd = new BufferedReader(
	            new InputStreamReader(response.getEntity().getContent()));
	    StringBuffer result = new StringBuffer();
	    String line = "";
	    while ((line = rd.readLine()) != null)
	    {
	        result.append(line);
	    }
	    System.out.println("response is"+result.toString());
	}
}
